!SESSION 2016-11-27 17:56:56.613 -----------------------------------------------
eclipse.buildId=M20120914-1800
java.version=1.8.0_102
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=zh_CN
Command-line arguments:  -os win32 -ws win32 -arch x86_64

!ENTRY org.eclipse.core.resources 2 10035 2016-11-27 17:57:00.755
!MESSAGE The workspace exited with unsaved changes in the previous session; refreshing workspace to recover changes.
!SESSION 2016-11-28 20:30:10.657 -----------------------------------------------
eclipse.buildId=M20120914-1800
java.version=1.8.0_102
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=zh_CN
Command-line arguments:  -os win32 -ws win32 -arch x86_64

!ENTRY org.eclipse.core.resources 2 10035 2016-11-28 20:30:13.876
!MESSAGE The workspace exited with unsaved changes in the previous session; refreshing workspace to recover changes.
!SESSION 2016-12-10 20:31:57.233 -----------------------------------------------
eclipse.buildId=M20120914-1800
java.version=1.8.0_102
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=zh_CN
Command-line arguments:  -os win32 -ws win32 -arch x86_64

!ENTRY org.eclipse.jdt.core 4 4 2016-12-10 22:47:56.987
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package expStudent;

import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Vector;

import javax.swing.ComboBoxModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

public class StudentChooseCourse {
	private static LinkDB linkDB = new LinkDB();
	private static Connection dbconn;
	//初始化
	public JPanel jpSCC = new JPanel(new GridLayout(2,1));
	public JScrollPane jspSCC = null;
	private JTable jtSCC = null;
	private Vector rowData = new Vector();
	private Vector columName = new Vector();
	private String[] str = {"--请选择内容--"};
	private String str0 = "--请选择内容--";
	//查询
	private JPanel jpOne = new JPanel();
	private JPanel jpTwo = new JPanel();
	private JLabel jlStr0 = new JLabel("选课查询");
	//private JLabel jlSCC_S = new JLabel("学年：");
	//private JComboBox jcbSCC_S = new JComboBox(str);
	//private JLabel jlSCC_T = new JLabel("       学期：");
	//private JComboBox jcbSCC_T = new JComboBox(str);
	private JLabel jlSCC_STU = new JLabel("学号：");
	private JTextField jtfSCC = new JTextField(12);
	private JButton jbtnSCC = new JButton("查询");
	//选课
	public JPanel jpXuanKe = new JPanel(new GridLayout(2,1));
	private JPanel jpThree = new JPanel();
	private JPanel jpFour = new JPanel();
	private JLabel jlStr1 = new JLabel("学生选课");
	//private JLabel jlXuanKe_XueNian = new JLabel("学年：");
	//private JComboBox jcbXuanKe_xuenian = new JComboBox(str);
	//private JLabel jlXuanKe_XueQi = new JLabel("          学期：");
	//private JComboBox jcbXuanKe_xueqi = new JComboBox(str);
	private JLabel jlXuanKe_xuehao = new JLabel("学号：");
	private JTextField jtfXuanKe_xuehao = new JTextField(12);
	private JLabel jlXuanKe_course = new JLabel("课程：");
	private JComboBox jcbXuanKe_course = new JComboBox(str);
	private JButton jbtnXuanKe_queren = new JButton("确认");
	
	public StudentChooseCourse(){
		//初始化
		columName.add("学号");
		columName.add("姓名");
		//columName.add("学年");
		//columName.add("学期号");
		columName.add("课程");
		columName.add("学分");
		//查询
		//jpOne.add(jlSCC_S);
		//jpOne.add(jcbSCC_S);
		//jpOne.add(jlSCC_T);
		//jpOne.add(jcbSCC_T);
		jpOne.add(jlSCC_STU);
		jpOne.add(jtfSCC);
		jpOne.add(jbtnSCC);
		jpTwo.add(jlStr0);
		jpSCC.add(jpTwo);
		jpSCC.add(jpOne);
		//添加
		jpFour.add(jlStr1);
		//jpThree.add(jlXuanKe_XueNian);
		//jpThree.add(jcbXuanKe_xuenian);
		//jpThree.add(jlXuanKe_XueQi);
		//jpThree.add(jcbXuanKe_xueqi);
		jpThree.add(jlXuanKe_xuehao);
		jpThree.add(jtfXuanKe_xuehao);
		jpThree.add(jlXuanKe_course);
		jpThree.add(jcbXuanKe_course);
		jpThree.add(jbtnXuanKe_queren);
		jpXuanKe.add(jpFour);
		jpXuanKe.add(jpThree);
		
		jtSCC = new JTable(rowData,columName);
		jtSCC.setPreferredScrollableViewportSize(new Dimension(880, 300)); //表的大小
		//表中数据居中
		DefaultTableCellRenderer dtcr = new DefaultTableCellRenderer();
		dtcr.setHorizontalAlignment(DefaultTableCellRenderer.CENTER);
		jtSCC.setDefaultRenderer(Object.class, dtcr);
		jspSCC = new JScrollPane(jtSCC);
		
		//显示课程
		try {
			dbconn = linkDB.lindDataBase();
			Statement stmt = dbconn.createStatement();//创建SQL命令对象
		    ResultSet rsCourse = stmt.executeQuery("select distinct course_name from Course");
			while(rsCourse.next()){
				jcbXuanKe_course.addItem(rsCourse.getString("course_name"));
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		/*
		//选择学年出现相应学期
		jcbSCC_S.addItemListener(new ItemListener() {
					
			@Override
			public void itemStateChanged(ItemEvent e) {
				if(e.getStateChange()==ItemEvent.SELECTED){
					jcbSCC_T.removeAllItems();
					jcbSCC_T.addItem("--请选择内容--");
					XueNian_XueQi(jcbSCC_S,jcbSCC_T);
				}
			}
		});
		jcbXuanKe_xuenian.addItemListener(new ItemListener() {
			
			@Override
			public void itemStateChanged(ItemEvent e) {
				if(e.getStateChange()==ItemEvent.SELECTED){
					jcbXuanKe_xueqi.removeAllItems();
					jcbXuanKe_xueqi.addItem("--请选择内容--");
					XueNian_XueQi(jcbXuanKe_xuenian,jcbXuanKe_xueqi);
				}
			}
		});*/
		
		//查询
		jbtnSCC.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				try {
					/*if(jcbSCC_S.getSelectedItem()==str0){
						JOptionPane.showMessageDialog(null, "学年不能为空！","错误提示",JOptionPane.ERROR_MESSAGE);
					}
					else if(jcbSCC_T.getSelectedItem()==str0){
						JOptionPane.showMessageDialog(null, "学期不能为空！","错误提示",JOptionPane.ERROR_MESSAGE);
					}
					else if(jtfSCC.getText().trim()==str0){
						JOptionPane.showMessageDialog(null, "学号不能为空！","错误提示",JOptionPane.ERROR_MESSAGE);
					}*/
					if(jtfSCC.getText().trim()!=str0){
						dbconn = linkDB.lindDataBase();
						Statement stmt = dbconn.createStatement();//创建SQL命令对象
						ResultSet rs = stmt.executeQuery("select a.student_id, a.student_name, d.course_name, d.course_credit " +
								"from Student a,StudentChooseCourse c,Course d where a.student_id=c.student_id and d.course_code=c.course_code " +
								"and a.student_id='"+jtfSCC.getText().trim()+"' order by a.student_id"); //存放找出数据的总行数
						DefaultTableModel dtmSCC = new DefaultTableModel();
						Vector data = new Vector();
						boolean b = false;
						while(rs.next()){
							Vector vNext = new Vector();
							vNext.add(rs.getString("student_id"));
							vNext.add(rs.getString("student_name"));
							//vNext.add(rs.getString("school_yesr"));
							//vNext.add(rs.getString("term_id"));
							vNext.add(rs.getString("course_name"));
							vNext.add(rs.getString("course_credit"));
							data.add(vNext);
							dtmSCC.setDataVector(data, columName);
							jtSCC.setModel(dtmSCC);
							b = true;
						}
						if(b == false)  
							JOptionPane.showMessageDialog(null, "没有该学生的选课信息！","查询提示",JOptionPane.INFORMATION_MESSAGE);
						dbconn.close();
					}else
				} catch (Exception e2) {
					e2.printStackTrace();
				}
			}
		});
		
		//确认选课
		jbtnXuanKe_queren.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				try {
					/*if(jcbXuanKe_xuenian.getSelectedItem()==str0){
						JOptionPane.showMessageDialog(null, "学年不能为空！","错误提示",JOptionPane.ERROR_MESSAGE);
					}
					else if(jcbXuanKe_xueqi.getSelectedItem()==str0){
						JOptionPane.showMessageDialog(null, "学期不能为空！","错误提示",JOptionPane.ERROR_MESSAGE);
					}
					else if(jcbXuanKe_course.getSelectedItem()==str0){
						JOptionPane.showMessageDialog(null, "课程不能为空！","错误提示",JOptionPane.ERROR_MESSAGE);
					}*/
					if(jtfXuanKe_xuehao.getText().trim()!=str0){
						dbconn = linkDB.lindDataBase();
						Statement stmt = dbconn.createStatement();
						ResultSet rs = stmt.executeQuery("");
					}
				}catch(Exception e1){
					e1.printStackTrace();
				}
			}
		});
	}
	
	//查询
	public void Serch(String str){
		
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:503)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:322)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2284)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2451)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:246)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:206)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1247)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.ui 4 2 2016-12-10 22:47:57.062
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:503)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:322)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2284)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2451)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:246)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:206)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1247)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.ui 4 0 2016-12-10 22:47:57.065
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:503)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:322)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2284)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2451)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:246)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:206)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1247)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.core 4 4 2016-12-11 00:02:27.987
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package expStudent;

import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Vector;

import javax.swing.ComboBoxModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

public class StudentChooseCourse {
	private static LinkDB linkDB = new LinkDB();
	private static Connection dbconn;
	//初始化
	public JPanel jpSCC = new JPanel(new GridLayout(2,1));
	public JScrollPane jspSCC = null;
	private JTable jtSCC = null;
	private Vector rowData = new Vector();
	private Vector columName = new Vector();
	private String[] str = {"--请选择内容--"};
	private String str0 = "--请选择内容--";
	//查询
	private JPanel jpOne = new JPanel();
	private JPanel jpTwo = new JPanel();
	private JLabel jlStr0 = new JLabel("选课查询");
	//private JLabel jlSCC_S = new JLabel("学年：");
	//private JComboBox jcbSCC_S = new JComboBox(str);
	//private JLabel jlSCC_T = new JLabel("       学期：");
	//private JComboBox jcbSCC_T = new JComboBox(str);
	private JLabel jlSCC_STU = new JLabel("学号：");
	private JTextField jtfSCC = new JTextField(12);
	private JButton jbtnSCC = new JButton("查询");
	//删除
	private JLabel jlKongGe = new JLabel("          ");
	private JButton jbtnDelete = new JButton("删除");
	private int a = 0;
	//选课
	public JPanel jpXuanKe = new JPanel(new GridLayout(2,1));
	private JPanel jpThree = new JPanel();
	private JPanel jpFour = new JPanel();
	private JLabel jlStr1 = new JLabel("学生选课");
	//private JLabel jlXuanKe_XueNian = new JLabel("学年：");
	//private JComboBox jcbXuanKe_xuenian = new JComboBox(str);
	//private JLabel jlXuanKe_XueQi = new JLabel("          学期：");
	//private JComboBox jcbXuanKe_xueqi = new JComboBox(str);
	private JLabel jlXuanKe_xuehao = new JLabel("学号：");
	private JTextField jtfXuanKe_xuehao = new JTextField(12);
	private JLabel jlXuanKe_course = new JLabel("                课程：");
	private JComboBox jcbXuanKe_course = new JComboBox(str);
	private JButton jbtnXuanKe_queren = new JButton("确认");
	
	public StudentChooseCourse(){
		//初始化
		columName.add("学号");
		columName.add("姓名");
		//columName.add("学年");
		//columName.add("学期号");
		columName.add("课程");
		columName.add("学分");
		//查询
		jpOne.add(jlSCC_STU);
		jpOne.add(jtfSCC);
		jpOne.add(jbtnSCC);
		jpOne.add(jlKongGe);
		jpOne.add(jbtnDelete);
		jpTwo.add(jlStr0);
		jpSCC.add(jpTwo);
		jpSCC.add(jpOne);
		//添加
		jpFour.add(jlStr1);
		jpThree.add(jlXuanKe_xuehao);
		jpThree.add(jtfXuanKe_xuehao);
		jpThree.add(jlXuanKe_course);
		jpThree.add(jcbXuanKe_course);
		jpThree.add(jbtnXuanKe_queren);
		jpXuanKe.add(jpFour);
		jpXuanKe.add(jpThree);
		
		jtSCC = new JTable(rowData,columName);
		jtSCC.setPreferredScrollableViewportSize(new Dimension(880, 300)); //表的大小
		//表中数据居中
		DefaultTableCellRenderer dtcr = new DefaultTableCellRenderer();
		dtcr.setHorizontalAlignment(DefaultTableCellRenderer.CENTER);
		jtSCC.setDefaultRenderer(Object.class, dtcr);
		jspSCC = new JScrollPane(jtSCC);
		
		//显示课程
		try {
			dbconn = linkDB.lindDataBase();
			Statement stmt = dbconn.createStatement();//创建SQL命令对象
		    ResultSet rsCourse = stmt.executeQuery("select distinct course_name from Course");
			while(rsCourse.next()){
				jcbXuanKe_course.addItem(rsCourse.getString("course_name"));
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		/*
		//选择学年出现相应学期
		jcbSCC_S.addItemListener(new ItemListener() {
					
			@Override
			public void itemStateChanged(ItemEvent e) {
				if(e.getStateChange()==ItemEvent.SELECTED){
					jcbSCC_T.removeAllItems();
					jcbSCC_T.addItem("--请选择内容--");
					XueNian_XueQi(jcbSCC_S,jcbSCC_T);
				}
			}
		});
		jcbXuanKe_xuenian.addItemListener(new ItemListener() {
			
			@Override
			public void itemStateChanged(ItemEvent e) {
				if(e.getStateChange()==ItemEvent.SELECTED){
					jcbXuanKe_xueqi.removeAllItems();
					jcbXuanKe_xueqi.addItem("--请选择内容--");
					XueNian_XueQi(jcbXuanKe_xuenian,jcbXuanKe_xueqi);
				}
			}
		});*/
		
		//查询
		jbtnSCC.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				if(!jtfSCC.getText().trim().equals("")){
					Serch(jtfSCC.getText().trim());
				}else{
					JOptionPane.showMessageDialog(null, "学号不能为空！","错误提示",JOptionPane.ERROR_MESSAGE);
				}
			}
		});
		//删除
		jbtnDelete.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
					if(a == 1){
						try{
						dbconn = linkDB.lindDataBase();
						Statement stmt = dbconn.createStatement();
						ResultSet rs = stmt.executeQuery("select student_id from Student where student_id='"+jtfXuanKe_xuehao.getText().trim()+"'");
						boolean b = false;
						if(rs.next()){b = true;}
						if(b == true){
						    String strAdd = "insert into StudentChooseCourse(student_id,course_code) " +
								"select Student.student_id, Course.course_code from Student, Course " +
								"where Student.student_id='"+jtfXuanKe_xuehao.getText().trim()+"' and Course.course_name='"+jcbXuanKe_course.getSelectedItem()+"'";
						    stmt.executeUpdate(strAdd);
						    Serch(jtfXuanKe_xuehao.getText().trim());
						    JOptionPane.showMessageDialog(null, "选课成功！","错误提示",JOptionPane.INFORMATION_MESSAGE);
						}else{
							JOptionPane.showMessageDialog(null, "不存在该学生，无法执行此操作！","错误提示",JOptionPane.ERROR_MESSAGE);
						}
						dbconn.close();
						}catch
					}
			}
		});
		
		//确认选课
		jbtnXuanKe_queren.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				try {
					if(jtfXuanKe_xuehao.getText().trim().equals("")){
						JOptionPane.showMessageDialog(null, "学号不能为空！","错误提示",JOptionPane.ERROR_MESSAGE);
					}
					else if(jcbXuanKe_course.getSelectedItem()==str0){
						JOptionPane.showMessageDialog(null, "课程不能为空！","错误提示",JOptionPane.ERROR_MESSAGE);
					}
					else if(!jtfXuanKe_xuehao.getText().trim().equals("")&&jtfXuanKe_xuehao.getText().trim()!=str0){
						dbconn = linkDB.lindDataBase();
						Statement stmt = dbconn.createStatement();
						ResultSet rs = stmt.executeQuery("select student_id from Student where student_id='"+jtfXuanKe_xuehao.getText().trim()+"'");
						boolean b = false;
						if(rs.next()){b = true;}
						if(b == true){
						    String strAdd = "insert into StudentChooseCourse(student_id,course_code) " +
								"select Student.student_id, Course.course_code from Student, Course " +
								"where Student.student_id='"+jtfXuanKe_xuehao.getText().trim()+"' and Course.course_name='"+jcbXuanKe_course.getSelectedItem()+"'";
						    stmt.executeUpdate(strAdd);
						    Serch(jtfXuanKe_xuehao.getText().trim());
						    JOptionPane.showMessageDialog(null, "选课成功！","错误提示",JOptionPane.INFORMATION_MESSAGE);
						}else{
							JOptionPane.showMessageDialog(null, "不存在该学生，无法执行此操作！","错误提示",JOptionPane.ERROR_MESSAGE);
						}
						dbconn.close();
					}
				}catch(Exception e1){
					e1.printStackTrace();
				}
			}
		});
	}
	
	//查询
	public void Serch(String str){
		try {
			dbconn = linkDB.lindDataBase();
			Statement stmt = dbconn.createStatement();//创建SQL命令对象
			ResultSet rs = stmt.executeQuery("select a.student_id, a.student_name, d.course_name, d.course_credit " +
					"from Student a,StudentChooseCourse c,Course d where a.student_id=c.student_id and d.course_code=c.course_code " +
					"and a.student_id='"+str+"' order by a.student_id"); //存放找出数据的总行数
			DefaultTableModel dtmSCC = new DefaultTableModel();
			Vector data = new Vector();
			boolean b = false;
			while(rs.next()){
				Vector vNext = new Vector();
				vNext.add(rs.getString("student_id"));
				vNext.add(rs.getString("student_name"));
				vNext.add(rs.getString("course_name"));
				vNext.add(rs.getString("course_credit"));
				data.add(vNext);
				dtmSCC.setDataVector(data, columName);
				jtSCC.setModel(dtmSCC);
				b = true;
				a = 1;
			}
			if(b == false)  
				JOptionPane.showMessageDialog(null, "没有该学生的选课信息！","查询提示",JOptionPane.INFORMATION_MESSAGE);
			else 
				JOptionPane.showMessageDialog(null, "成功查询到该学生的选课信息！","查询提示",JOptionPane.INFORMATION_MESSAGE);
			dbconn.close();
		} catch (Exception e2) {
			e2.printStackTrace();
		}
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:503)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:322)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2284)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2451)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:246)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:206)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1247)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.ui 4 2 2016-12-11 00:02:27.991
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:503)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:322)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2284)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2451)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:246)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:206)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1247)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.ui 4 0 2016-12-11 00:02:27.993
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:503)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:322)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2284)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2451)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:246)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:206)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1247)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.core 4 4 2016-12-11 00:02:28.010
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package expStudent;

import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Vector;

import javax.swing.ComboBoxModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

public class StudentChooseCourse {
	private static LinkDB linkDB = new LinkDB();
	private static Connection dbconn;
	//初始化
	public JPanel jpSCC = new JPanel(new GridLayout(2,1));
	public JScrollPane jspSCC = null;
	private JTable jtSCC = null;
	private Vector rowData = new Vector();
	private Vector columName = new Vector();
	private String[] str = {"--请选择内容--"};
	private String str0 = "--请选择内容--";
	//查询
	private JPanel jpOne = new JPanel();
	private JPanel jpTwo = new JPanel();
	private JLabel jlStr0 = new JLabel("选课查询");
	//private JLabel jlSCC_S = new JLabel("学年：");
	//private JComboBox jcbSCC_S = new JComboBox(str);
	//private JLabel jlSCC_T = new JLabel("       学期：");
	//private JComboBox jcbSCC_T = new JComboBox(str);
	private JLabel jlSCC_STU = new JLabel("学号：");
	private JTextField jtfSCC = new JTextField(12);
	private JButton jbtnSCC = new JButton("查询");
	//删除
	private JLabel jlKongGe = new JLabel("          ");
	private JButton jbtnDelete = new JButton("删除");
	private int a = 0;
	//选课
	public JPanel jpXuanKe = new JPanel(new GridLayout(2,1));
	private JPanel jpThree = new JPanel();
	private JPanel jpFour = new JPanel();
	private JLabel jlStr1 = new JLabel("学生选课");
	//private JLabel jlXuanKe_XueNian = new JLabel("学年：");
	//private JComboBox jcbXuanKe_xuenian = new JComboBox(str);
	//private JLabel jlXuanKe_XueQi = new JLabel("          学期：");
	//private JComboBox jcbXuanKe_xueqi = new JComboBox(str);
	private JLabel jlXuanKe_xuehao = new JLabel("学号：");
	private JTextField jtfXuanKe_xuehao = new JTextField(12);
	private JLabel jlXuanKe_course = new JLabel("                课程：");
	private JComboBox jcbXuanKe_course = new JComboBox(str);
	private JButton jbtnXuanKe_queren = new JButton("确认");
	
	public StudentChooseCourse(){
		//初始化
		columName.add("学号");
		columName.add("姓名");
		//columName.add("学年");
		//columName.add("学期号");
		columName.add("课程");
		columName.add("学分");
		//查询
		jpOne.add(jlSCC_STU);
		jpOne.add(jtfSCC);
		jpOne.add(jbtnSCC);
		jpOne.add(jlKongGe);
		jpOne.add(jbtnDelete);
		jpTwo.add(jlStr0);
		jpSCC.add(jpTwo);
		jpSCC.add(jpOne);
		//添加
		jpFour.add(jlStr1);
		jpThree.add(jlXuanKe_xuehao);
		jpThree.add(jtfXuanKe_xuehao);
		jpThree.add(jlXuanKe_course);
		jpThree.add(jcbXuanKe_course);
		jpThree.add(jbtnXuanKe_queren);
		jpXuanKe.add(jpFour);
		jpXuanKe.add(jpThree);
		
		jtSCC = new JTable(rowData,columName);
		jtSCC.setPreferredScrollableViewportSize(new Dimension(880, 300)); //表的大小
		//表中数据居中
		DefaultTableCellRenderer dtcr = new DefaultTableCellRenderer();
		dtcr.setHorizontalAlignment(DefaultTableCellRenderer.CENTER);
		jtSCC.setDefaultRenderer(Object.class, dtcr);
		jspSCC = new JScrollPane(jtSCC);
		
		//显示课程
		try {
			dbconn = linkDB.lindDataBase();
			Statement stmt = dbconn.createStatement();//创建SQL命令对象
		    ResultSet rsCourse = stmt.executeQuery("select distinct course_name from Course");
			while(rsCourse.next()){
				jcbXuanKe_course.addItem(rsCourse.getString("course_name"));
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		/*
		//选择学年出现相应学期
		jcbSCC_S.addItemListener(new ItemListener() {
					
			@Override
			public void itemStateChanged(ItemEvent e) {
				if(e.getStateChange()==ItemEvent.SELECTED){
					jcbSCC_T.removeAllItems();
					jcbSCC_T.addItem("--请选择内容--");
					XueNian_XueQi(jcbSCC_S,jcbSCC_T);
				}
			}
		});
		jcbXuanKe_xuenian.addItemListener(new ItemListener() {
			
			@Override
			public void itemStateChanged(ItemEvent e) {
				if(e.getStateChange()==ItemEvent.SELECTED){
					jcbXuanKe_xueqi.removeAllItems();
					jcbXuanKe_xueqi.addItem("--请选择内容--");
					XueNian_XueQi(jcbXuanKe_xuenian,jcbXuanKe_xueqi);
				}
			}
		});*/
		
		//查询
		jbtnSCC.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				if(!jtfSCC.getText().trim().equals("")){
					Serch(jtfSCC.getText().trim());
				}else{
					JOptionPane.showMessageDialog(null, "学号不能为空！","错误提示",JOptionPane.ERROR_MESSAGE);
				}
			}
		});
		//删除
		jbtnDelete.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
					if(a == 1){
						try{
						dbconn = linkDB.lindDataBase();
						Statement stmt = dbconn.createStatement();
						ResultSet rs = stmt.executeQuery("select student_id from Student where student_id='"+jtfXuanKe_xuehao.getText().trim()+"'");
						boolean b = false;
						if(rs.next()){b = true;}
						if(b == true){
						    String strAdd = "insert into StudentChooseCourse(student_id,course_code) " +
								"select Student.student_id, Course.course_code from Student, Course " +
								"where Student.student_id='"+jtfXuanKe_xuehao.getText().trim()+"' and Course.course_name='"+jcbXuanKe_course.getSelectedItem()+"'";
						    stmt.executeUpdate(strAdd);
						    Serch(jtfXuanKe_xuehao.getText().trim());
						    JOptionPane.showMessageDialog(null, "选课成功！","错误提示",JOptionPane.INFORMATION_MESSAGE);
						}else{
							JOptionPane.showMessageDialog(null, "不存在该学生，无法执行此操作！","错误提示",JOptionPane.ERROR_MESSAGE);
						}
						dbconn.close();
						}catch
					}
			}
		});
		
		//确认选课
		jbtnXuanKe_queren.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				try {
					if(jtfXuanKe_xuehao.getText().trim().equals("")){
						JOptionPane.showMessageDialog(null, "学号不能为空！","错误提示",JOptionPane.ERROR_MESSAGE);
					}
					else if(jcbXuanKe_course.getSelectedItem()==str0){
						JOptionPane.showMessageDialog(null, "课程不能为空！","错误提示",JOptionPane.ERROR_MESSAGE);
					}
					else if(!jtfXuanKe_xuehao.getText().trim().equals("")&&jtfXuanKe_xuehao.getText().trim()!=str0){
						dbconn = linkDB.lindDataBase();
						Statement stmt = dbconn.createStatement();
						ResultSet rs = stmt.executeQuery("select student_id from Student where student_id='"+jtfXuanKe_xuehao.getText().trim()+"'");
						boolean b = false;
						if(rs.next()){b = true;}
						if(b == true){
						    String strAdd = "insert into StudentChooseCourse(student_id,course_code) " +
								"select Student.student_id, Course.course_code from Student, Course " +
								"where Student.student_id='"+jtfXuanKe_xuehao.getText().trim()+"' and Course.course_name='"+jcbXuanKe_course.getSelectedItem()+"'";
						    stmt.executeUpdate(strAdd);
						    Serch(jtfXuanKe_xuehao.getText().trim());
						    JOptionPane.showMessageDialog(null, "选课成功！","错误提示",JOptionPane.INFORMATION_MESSAGE);
						}else{
							JOptionPane.showMessageDialog(null, "不存在该学生，无法执行此操作！","错误提示",JOptionPane.ERROR_MESSAGE);
						}
						dbconn.close();
					}
				}catch(Exception e1){
					e1.printStackTrace();
				}
			}
		});
	}
	
	//查询
	public void Serch(String str){
		try {
			dbconn = linkDB.lindDataBase();
			Statement stmt = dbconn.createStatement();//创建SQL命令对象
			ResultSet rs = stmt.executeQuery("select a.student_id, a.student_name, d.course_name, d.course_credit " +
					"from Student a,StudentChooseCourse c,Course d where a.student_id=c.student_id and d.course_code=c.course_code " +
					"and a.student_id='"+str+"' order by a.student_id"); //存放找出数据的总行数
			DefaultTableModel dtmSCC = new DefaultTableModel();
			Vector data = new Vector();
			boolean b = false;
			while(rs.next()){
				Vector vNext = new Vector();
				vNext.add(rs.getString("student_id"));
				vNext.add(rs.getString("student_name"));
				vNext.add(rs.getString("course_name"));
				vNext.add(rs.getString("course_credit"));
				data.add(vNext);
				dtmSCC.setDataVector(data, columName);
				jtSCC.setModel(dtmSCC);
				b = true;
				a = 1;
			}
			if(b == false)  
				JOptionPane.showMessageDialog(null, "没有该学生的选课信息！","查询提示",JOptionPane.INFORMATION_MESSAGE);
			else 
				JOptionPane.showMessageDialog(null, "成功查询到该学生的选课信息！","查询提示",JOptionPane.INFORMATION_MESSAGE);
			dbconn.close();
		} catch (Exception e2) {
			e2.printStackTrace();
		}
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:503)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:322)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2284)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2451)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:470)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2016-12-11 00:02:28.014
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:503)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:322)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2284)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2451)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:470)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2016-12-11 00:02:28.016
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:503)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:322)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2284)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2451)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:470)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2016-12-11 00:02:28.187
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package expStudent;

import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Vector;

import javax.swing.ComboBoxModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

public class StudentChooseCourse {
	private static LinkDB linkDB = new LinkDB();
	private static Connection dbconn;
	//初始化
	public JPanel jpSCC = new JPanel(new GridLayout(2,1));
	public JScrollPane jspSCC = null;
	private JTable jtSCC = null;
	private Vector rowData = new Vector();
	private Vector columName = new Vector();
	private String[] str = {"--请选择内容--"};
	private String str0 = "--请选择内容--";
	//查询
	private JPanel jpOne = new JPanel();
	private JPanel jpTwo = new JPanel();
	private JLabel jlStr0 = new JLabel("选课查询");
	//private JLabel jlSCC_S = new JLabel("学年：");
	//private JComboBox jcbSCC_S = new JComboBox(str);
	//private JLabel jlSCC_T = new JLabel("       学期：");
	//private JComboBox jcbSCC_T = new JComboBox(str);
	private JLabel jlSCC_STU = new JLabel("学号：");
	private JTextField jtfSCC = new JTextField(12);
	private JButton jbtnSCC = new JButton("查询");
	//删除
	private JLabel jlKongGe = new JLabel("          ");
	private JButton jbtnDelete = new JButton("删除");
	private int a = 0;
	//选课
	public JPanel jpXuanKe = new JPanel(new GridLayout(2,1));
	private JPanel jpThree = new JPanel();
	private JPanel jpFour = new JPanel();
	private JLabel jlStr1 = new JLabel("学生选课");
	//private JLabel jlXuanKe_XueNian = new JLabel("学年：");
	//private JComboBox jcbXuanKe_xuenian = new JComboBox(str);
	//private JLabel jlXuanKe_XueQi = new JLabel("          学期：");
	//private JComboBox jcbXuanKe_xueqi = new JComboBox(str);
	private JLabel jlXuanKe_xuehao = new JLabel("学号：");
	private JTextField jtfXuanKe_xuehao = new JTextField(12);
	private JLabel jlXuanKe_course = new JLabel("                课程：");
	private JComboBox jcbXuanKe_course = new JComboBox(str);
	private JButton jbtnXuanKe_queren = new JButton("确认");
	
	public StudentChooseCourse(){
		//初始化
		columName.add("学号");
		columName.add("姓名");
		//columName.add("学年");
		//columName.add("学期号");
		columName.add("课程");
		columName.add("学分");
		//查询
		jpOne.add(jlSCC_STU);
		jpOne.add(jtfSCC);
		jpOne.add(jbtnSCC);
		jpOne.add(jlKongGe);
		jpOne.add(jbtnDelete);
		jpTwo.add(jlStr0);
		jpSCC.add(jpTwo);
		jpSCC.add(jpOne);
		//添加
		jpFour.add(jlStr1);
		jpThree.add(jlXuanKe_xuehao);
		jpThree.add(jtfXuanKe_xuehao);
		jpThree.add(jlXuanKe_course);
		jpThree.add(jcbXuanKe_course);
		jpThree.add(jbtnXuanKe_queren);
		jpXuanKe.add(jpFour);
		jpXuanKe.add(jpThree);
		
		jtSCC = new JTable(rowData,columName);
		jtSCC.setPreferredScrollableViewportSize(new Dimension(880, 300)); //表的大小
		//表中数据居中
		DefaultTableCellRenderer dtcr = new DefaultTableCellRenderer();
		dtcr.setHorizontalAlignment(DefaultTableCellRenderer.CENTER);
		jtSCC.setDefaultRenderer(Object.class, dtcr);
		jspSCC = new JScrollPane(jtSCC);
		
		//显示课程
		try {
			dbconn = linkDB.lindDataBase();
			Statement stmt = dbconn.createStatement();//创建SQL命令对象
		    ResultSet rsCourse = stmt.executeQuery("select distinct course_name from Course");
			while(rsCourse.next()){
				jcbXuanKe_course.addItem(rsCourse.getString("course_name"));
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		/*
		//选择学年出现相应学期
		jcbSCC_S.addItemListener(new ItemListener() {
					
			@Override
			public void itemStateChanged(ItemEvent e) {
				if(e.getStateChange()==ItemEvent.SELECTED){
					jcbSCC_T.removeAllItems();
					jcbSCC_T.addItem("--请选择内容--");
					XueNian_XueQi(jcbSCC_S,jcbSCC_T);
				}
			}
		});
		jcbXuanKe_xuenian.addItemListener(new ItemListener() {
			
			@Override
			public void itemStateChanged(ItemEvent e) {
				if(e.getStateChange()==ItemEvent.SELECTED){
					jcbXuanKe_xueqi.removeAllItems();
					jcbXuanKe_xueqi.addItem("--请选择内容--");
					XueNian_XueQi(jcbXuanKe_xuenian,jcbXuanKe_xueqi);
				}
			}
		});*/
		
		//查询
		jbtnSCC.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				if(!jtfSCC.getText().trim().equals("")){
					Serch(jtfSCC.getText().trim());
				}else{
					JOptionPane.showMessageDialog(null, "学号不能为空！","错误提示",JOptionPane.ERROR_MESSAGE);
				}
			}
		});
		//删除
		jbtnDelete.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
					if(a == 1){
						try{
						dbconn = linkDB.lindDataBase();
						Statement stmt = dbconn.createStatement();
						ResultSet rs = stmt.executeQuery("select student_id from Student where student_id='"+jtfXuanKe_xuehao.getText().trim()+"'");
						boolean b = false;
						if(rs.next()){b = true;}
						if(b == true){
						    String strAdd = "insert into StudentChooseCourse(student_id,course_code) " +
								"select Student.student_id, Course.course_code from Student, Course " +
								"where Student.student_id='"+jtfXuanKe_xuehao.getText().trim()+"' and Course.course_name='"+jcbXuanKe_course.getSelectedItem()+"'";
						    stmt.executeUpdate(strAdd);
						    Serch(jtfXuanKe_xuehao.getText().trim());
						    JOptionPane.showMessageDialog(null, "选课成功！","错误提示",JOptionPane.INFORMATION_MESSAGE);
						}else{
							JOptionPane.showMessageDialog(null, "不存在该学生，无法执行此操作！","错误提示",JOptionPane.ERROR_MESSAGE);
						}
						dbconn.close();
						}catch
					}
			}
		});
		
		//确认选课
		jbtnXuanKe_queren.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				try {
					if(jtfXuanKe_xuehao.getText().trim().equals("")){
						JOptionPane.showMessageDialog(null, "学号不能为空！","错误提示",JOptionPane.ERROR_MESSAGE);
					}
					else if(jcbXuanKe_course.getSelectedItem()==str0){
						JOptionPane.showMessageDialog(null, "课程不能为空！","错误提示",JOptionPane.ERROR_MESSAGE);
					}
					else if(!jtfXuanKe_xuehao.getText().trim().equals("")&&jtfXuanKe_xuehao.getText().trim()!=str0){
						dbconn = linkDB.lindDataBase();
						Statement stmt = dbconn.createStatement();
						ResultSet rs = stmt.executeQuery("select student_id from Student where student_id='"+jtfXuanKe_xuehao.getText().trim()+"'");
						boolean b = false;
						if(rs.next()){b = true;}
						if(b == true){
						    String strAdd = "insert into StudentChooseCourse(student_id,course_code) " +
								"select Student.student_id, Course.course_code from Student, Course " +
								"where Student.student_id='"+jtfXuanKe_xuehao.getText().trim()+"' and Course.course_name='"+jcbXuanKe_course.getSelectedItem()+"'";
						    stmt.executeUpdate(strAdd);
						    Serch(jtfXuanKe_xuehao.getText().trim());
						    JOptionPane.showMessageDialog(null, "选课成功！","错误提示",JOptionPane.INFORMATION_MESSAGE);
						}else{
							JOptionPane.showMessageDialog(null, "不存在该学生，无法执行此操作！","错误提示",JOptionPane.ERROR_MESSAGE);
						}
						dbconn.close();
					}
				}catch(Exception e1){
					e1.printStackTrace();
				}
			}
		});
	}
	
	//查询
	public void Serch(String str){
		try {
			dbconn = linkDB.lindDataBase();
			Statement stmt = dbconn.createStatement();//创建SQL命令对象
			ResultSet rs = stmt.executeQuery("select a.student_id, a.student_name, d.course_name, d.course_credit " +
					"from Student a,StudentChooseCourse c,Course d where a.student_id=c.student_id and d.course_code=c.course_code " +
					"and a.student_id='"+str+"' order by a.student_id"); //存放找出数据的总行数
			DefaultTableModel dtmSCC = new DefaultTableModel();
			Vector data = new Vector();
			boolean b = false;
			while(rs.next()){
				Vector vNext = new Vector();
				vNext.add(rs.getString("student_id"));
				vNext.add(rs.getString("student_name"));
				vNext.add(rs.getString("course_name"));
				vNext.add(rs.getString("course_credit"));
				data.add(vNext);
				dtmSCC.setDataVector(data, columName);
				jtSCC.setModel(dtmSCC);
				b = true;
				a = 1;
			}
			if(b == false)  
				JOptionPane.showMessageDialog(null, "没有该学生的选课信息！","查询提示",JOptionPane.INFORMATION_MESSAGE);
			else 
				JOptionPane.showMessageDialog(null, "成功查询到该学生的选课信息！","查询提示",JOptionPane.INFORMATION_MESSAGE);
			dbconn.close();
		} catch (Exception e2) {
			e2.printStackTrace();
		}
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:503)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:322)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2284)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2451)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:170)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:155)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2016-12-11 00:02:28.192
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:503)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:322)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2284)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2451)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:170)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:155)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2016-12-11 00:02:28.194
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:503)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:322)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2284)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2451)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:170)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:155)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2016-12-11 00:02:33.059
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package expStudent;

import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Vector;

import javax.swing.ComboBoxModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

public class StudentChooseCourse {
	private static LinkDB linkDB = new LinkDB();
	private static Connection dbconn;
	//初始化
	public JPanel jpSCC = new JPanel(new GridLayout(2,1));
	public JScrollPane jspSCC = null;
	private JTable jtSCC = null;
	private Vector rowData = new Vector();
	private Vector columName = new Vector();
	private String[] str = {"--请选择内容--"};
	private String str0 = "--请选择内容--";
	//查询
	private JPanel jpOne = new JPanel();
	private JPanel jpTwo = new JPanel();
	private JLabel jlStr0 = new JLabel("选课查询");
	//private JLabel jlSCC_S = new JLabel("学年：");
	//private JComboBox jcbSCC_S = new JComboBox(str);
	//private JLabel jlSCC_T = new JLabel("       学期：");
	//private JComboBox jcbSCC_T = new JComboBox(str);
	private JLabel jlSCC_STU = new JLabel("学号：");
	private JTextField jtfSCC = new JTextField(12);
	private JButton jbtnSCC = new JButton("查询");
	//删除
	private JLabel jlKongGe = new JLabel("          ");
	private JButton jbtnDelete = new JButton("删除");
	private int a = 0;
	//选课
	public JPanel jpXuanKe = new JPanel(new GridLayout(2,1));
	private JPanel jpThree = new JPanel();
	private JPanel jpFour = new JPanel();
	private JLabel jlStr1 = new JLabel("学生选课");
	//private JLabel jlXuanKe_XueNian = new JLabel("学年：");
	//private JComboBox jcbXuanKe_xuenian = new JComboBox(str);
	//private JLabel jlXuanKe_XueQi = new JLabel("          学期：");
	//private JComboBox jcbXuanKe_xueqi = new JComboBox(str);
	private JLabel jlXuanKe_xuehao = new JLabel("学号：");
	private JTextField jtfXuanKe_xuehao = new JTextField(12);
	private JLabel jlXuanKe_course = new JLabel("                课程：");
	private JComboBox jcbXuanKe_course = new JComboBox(str);
	private JButton jbtnXuanKe_queren = new JButton("确认");
	
	public StudentChooseCourse(){
		//初始化
		columName.add("学号");
		columName.add("姓名");
		//columName.add("学年");
		//columName.add("学期号");
		columName.add("课程");
		columName.add("学分");
		//查询
		jpOne.add(jlSCC_STU);
		jpOne.add(jtfSCC);
		jpOne.add(jbtnSCC);
		jpOne.add(jlKongGe);
		jpOne.add(jbtnDelete);
		jpTwo.add(jlStr0);
		jpSCC.add(jpTwo);
		jpSCC.add(jpOne);
		//添加
		jpFour.add(jlStr1);
		jpThree.add(jlXuanKe_xuehao);
		jpThree.add(jtfXuanKe_xuehao);
		jpThree.add(jlXuanKe_course);
		jpThree.add(jcbXuanKe_course);
		jpThree.add(jbtnXuanKe_queren);
		jpXuanKe.add(jpFour);
		jpXuanKe.add(jpThree);
		
		jtSCC = new JTable(rowData,columName);
		jtSCC.setPreferredScrollableViewportSize(new Dimension(880, 300)); //表的大小
		//表中数据居中
		DefaultTableCellRenderer dtcr = new DefaultTableCellRenderer();
		dtcr.setHorizontalAlignment(DefaultTableCellRenderer.CENTER);
		jtSCC.setDefaultRenderer(Object.class, dtcr);
		jspSCC = new JScrollPane(jtSCC);
		
		//显示课程
		try {
			dbconn = linkDB.lindDataBase();
			Statement stmt = dbconn.createStatement();//创建SQL命令对象
		    ResultSet rsCourse = stmt.executeQuery("select distinct course_name from Course");
			while(rsCourse.next()){
				jcbXuanKe_course.addItem(rsCourse.getString("course_name"));
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		/*
		//选择学年出现相应学期
		jcbSCC_S.addItemListener(new ItemListener() {
					
			@Override
			public void itemStateChanged(ItemEvent e) {
				if(e.getStateChange()==ItemEvent.SELECTED){
					jcbSCC_T.removeAllItems();
					jcbSCC_T.addItem("--请选择内容--");
					XueNian_XueQi(jcbSCC_S,jcbSCC_T);
				}
			}
		});
		jcbXuanKe_xuenian.addItemListener(new ItemListener() {
			
			@Override
			public void itemStateChanged(ItemEvent e) {
				if(e.getStateChange()==ItemEvent.SELECTED){
					jcbXuanKe_xueqi.removeAllItems();
					jcbXuanKe_xueqi.addItem("--请选择内容--");
					XueNian_XueQi(jcbXuanKe_xuenian,jcbXuanKe_xueqi);
				}
			}
		});*/
		
		//查询
		jbtnSCC.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				if(!jtfSCC.getText().trim().equals("")){
					Serch(jtfSCC.getText().trim());
				}else{
					JOptionPane.showMessageDialog(null, "学号不能为空！","错误提示",JOptionPane.ERROR_MESSAGE);
				}
			}
		});
		//删除
		jbtnDelete.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
					if(a == 1){
						try{
						dbconn = linkDB.lindDataBase();
						Statement stmt = dbconn.createStatement();
						ResultSet rs = stmt.executeQuery("select student_id from Student where student_id='"+jtfXuanKe_xuehao.getText().trim()+"'");
						boolean b = false;
						if(rs.next()){b = true;}
						if(b == true){
						    String strAdd = "insert into StudentChooseCourse(student_id,course_code) " +
								"select Student.student_id, Course.course_code from Student, Course " +
								"where Student.student_id='"+jtfXuanKe_xuehao.getText().trim()+"' and Course.course_name='"+jcbXuanKe_course.getSelectedItem()+"'";
						    stmt.executeUpdate(strAdd);
						    Serch(jtfXuanKe_xuehao.getText().trim());
						    JOptionPane.showMessageDialog(null, "选课成功！","错误提示",JOptionPane.INFORMATION_MESSAGE);
						}else{
							JOptionPane.showMessageDialog(null, "不存在该学生，无法执行此操作！","错误提示",JOptionPane.ERROR_MESSAGE);
						}
						dbconn.close();
						}catch(Exception e)
					}
			}
		});
		
		//确认选课
		jbtnXuanKe_queren.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				try {
					if(jtfXuanKe_xuehao.getText().trim().equals("")){
						JOptionPane.showMessageDialog(null, "学号不能为空！","错误提示",JOptionPane.ERROR_MESSAGE);
					}
					else if(jcbXuanKe_course.getSelectedItem()==str0){
						JOptionPane.showMessageDialog(null, "课程不能为空！","错误提示",JOptionPane.ERROR_MESSAGE);
					}
					else if(!jtfXuanKe_xuehao.getText().trim().equals("")&&jtfXuanKe_xuehao.getText().trim()!=str0){
						dbconn = linkDB.lindDataBase();
						Statement stmt = dbconn.createStatement();
						ResultSet rs = stmt.executeQuery("select student_id from Student where student_id='"+jtfXuanKe_xuehao.getText().trim()+"'");
						boolean b = false;
						if(rs.next()){b = true;}
						if(b == true){
						    String strAdd = "insert into StudentChooseCourse(student_id,course_code) " +
								"select Student.student_id, Course.course_code from Student, Course " +
								"where Student.student_id='"+jtfXuanKe_xuehao.getText().trim()+"' and Course.course_name='"+jcbXuanKe_course.getSelectedItem()+"'";
						    stmt.executeUpdate(strAdd);
						    Serch(jtfXuanKe_xuehao.getText().trim());
						    JOptionPane.showMessageDialog(null, "选课成功！","错误提示",JOptionPane.INFORMATION_MESSAGE);
						}else{
							JOptionPane.showMessageDialog(null, "不存在该学生，无法执行此操作！","错误提示",JOptionPane.ERROR_MESSAGE);
						}
						dbconn.close();
					}
				}catch(Exception e1){
					e1.printStackTrace();
				}
			}
		});
	}
	
	//查询
	public void Serch(String str){
		try {
			dbconn = linkDB.lindDataBase();
			Statement stmt = dbconn.createStatement();//创建SQL命令对象
			ResultSet rs = stmt.executeQuery("select a.student_id, a.student_name, d.course_name, d.course_credit " +
					"from Student a,StudentChooseCourse c,Course d where a.student_id=c.student_id and d.course_code=c.course_code " +
					"and a.student_id='"+str+"' order by a.student_id"); //存放找出数据的总行数
			DefaultTableModel dtmSCC = new DefaultTableModel();
			Vector data = new Vector();
			boolean b = false;
			while(rs.next()){
				Vector vNext = new Vector();
				vNext.add(rs.getString("student_id"));
				vNext.add(rs.getString("student_name"));
				vNext.add(rs.getString("course_name"));
				vNext.add(rs.getString("course_credit"));
				data.add(vNext);
				dtmSCC.setDataVector(data, columName);
				jtSCC.setModel(dtmSCC);
				b = true;
				a = 1;
			}
			if(b == false)  
				JOptionPane.showMessageDialog(null, "没有该学生的选课信息！","查询提示",JOptionPane.INFORMATION_MESSAGE);
			else 
				JOptionPane.showMessageDialog(null, "成功查询到该学生的选课信息！","查询提示",JOptionPane.INFORMATION_MESSAGE);
			dbconn.close();
		} catch (Exception e2) {
			e2.printStackTrace();
		}
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:503)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:322)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2284)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2451)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:246)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:203)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:258)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:518)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1082)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:170)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1247)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.ui 4 2 2016-12-11 00:02:33.062
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:503)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:322)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2284)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2451)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:246)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:203)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:258)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:518)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1082)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:170)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1247)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.ui 4 0 2016-12-11 00:02:33.064
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:503)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:322)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2284)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2451)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:246)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:203)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:258)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:518)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1082)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:170)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1247)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.core 4 4 2016-12-11 00:02:33.091
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package expStudent;

import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Vector;

import javax.swing.ComboBoxModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

public class StudentChooseCourse {
	private static LinkDB linkDB = new LinkDB();
	private static Connection dbconn;
	//初始化
	public JPanel jpSCC = new JPanel(new GridLayout(2,1));
	public JScrollPane jspSCC = null;
	private JTable jtSCC = null;
	private Vector rowData = new Vector();
	private Vector columName = new Vector();
	private String[] str = {"--请选择内容--"};
	private String str0 = "--请选择内容--";
	//查询
	private JPanel jpOne = new JPanel();
	private JPanel jpTwo = new JPanel();
	private JLabel jlStr0 = new JLabel("选课查询");
	//private JLabel jlSCC_S = new JLabel("学年：");
	//private JComboBox jcbSCC_S = new JComboBox(str);
	//private JLabel jlSCC_T = new JLabel("       学期：");
	//private JComboBox jcbSCC_T = new JComboBox(str);
	private JLabel jlSCC_STU = new JLabel("学号：");
	private JTextField jtfSCC = new JTextField(12);
	private JButton jbtnSCC = new JButton("查询");
	//删除
	private JLabel jlKongGe = new JLabel("          ");
	private JButton jbtnDelete = new JButton("删除");
	private int a = 0;
	//选课
	public JPanel jpXuanKe = new JPanel(new GridLayout(2,1));
	private JPanel jpThree = new JPanel();
	private JPanel jpFour = new JPanel();
	private JLabel jlStr1 = new JLabel("学生选课");
	//private JLabel jlXuanKe_XueNian = new JLabel("学年：");
	//private JComboBox jcbXuanKe_xuenian = new JComboBox(str);
	//private JLabel jlXuanKe_XueQi = new JLabel("          学期：");
	//private JComboBox jcbXuanKe_xueqi = new JComboBox(str);
	private JLabel jlXuanKe_xuehao = new JLabel("学号：");
	private JTextField jtfXuanKe_xuehao = new JTextField(12);
	private JLabel jlXuanKe_course = new JLabel("                课程：");
	private JComboBox jcbXuanKe_course = new JComboBox(str);
	private JButton jbtnXuanKe_queren = new JButton("确认");
	
	public StudentChooseCourse(){
		//初始化
		columName.add("学号");
		columName.add("姓名");
		//columName.add("学年");
		//columName.add("学期号");
		columName.add("课程");
		columName.add("学分");
		//查询
		jpOne.add(jlSCC_STU);
		jpOne.add(jtfSCC);
		jpOne.add(jbtnSCC);
		jpOne.add(jlKongGe);
		jpOne.add(jbtnDelete);
		jpTwo.add(jlStr0);
		jpSCC.add(jpTwo);
		jpSCC.add(jpOne);
		//添加
		jpFour.add(jlStr1);
		jpThree.add(jlXuanKe_xuehao);
		jpThree.add(jtfXuanKe_xuehao);
		jpThree.add(jlXuanKe_course);
		jpThree.add(jcbXuanKe_course);
		jpThree.add(jbtnXuanKe_queren);
		jpXuanKe.add(jpFour);
		jpXuanKe.add(jpThree);
		
		jtSCC = new JTable(rowData,columName);
		jtSCC.setPreferredScrollableViewportSize(new Dimension(880, 300)); //表的大小
		//表中数据居中
		DefaultTableCellRenderer dtcr = new DefaultTableCellRenderer();
		dtcr.setHorizontalAlignment(DefaultTableCellRenderer.CENTER);
		jtSCC.setDefaultRenderer(Object.class, dtcr);
		jspSCC = new JScrollPane(jtSCC);
		
		//显示课程
		try {
			dbconn = linkDB.lindDataBase();
			Statement stmt = dbconn.createStatement();//创建SQL命令对象
		    ResultSet rsCourse = stmt.executeQuery("select distinct course_name from Course");
			while(rsCourse.next()){
				jcbXuanKe_course.addItem(rsCourse.getString("course_name"));
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		/*
		//选择学年出现相应学期
		jcbSCC_S.addItemListener(new ItemListener() {
					
			@Override
			public void itemStateChanged(ItemEvent e) {
				if(e.getStateChange()==ItemEvent.SELECTED){
					jcbSCC_T.removeAllItems();
					jcbSCC_T.addItem("--请选择内容--");
					XueNian_XueQi(jcbSCC_S,jcbSCC_T);
				}
			}
		});
		jcbXuanKe_xuenian.addItemListener(new ItemListener() {
			
			@Override
			public void itemStateChanged(ItemEvent e) {
				if(e.getStateChange()==ItemEvent.SELECTED){
					jcbXuanKe_xueqi.removeAllItems();
					jcbXuanKe_xueqi.addItem("--请选择内容--");
					XueNian_XueQi(jcbXuanKe_xuenian,jcbXuanKe_xueqi);
				}
			}
		});*/
		
		//查询
		jbtnSCC.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				if(!jtfSCC.getText().trim().equals("")){
					Serch(jtfSCC.getText().trim());
				}else{
					JOptionPane.showMessageDialog(null, "学号不能为空！","错误提示",JOptionPane.ERROR_MESSAGE);
				}
			}
		});
		//删除
		jbtnDelete.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
					if(a == 1){
						try{
						dbconn = linkDB.lindDataBase();
						Statement stmt = dbconn.createStatement();
						ResultSet rs = stmt.executeQuery("select student_id from Student where student_id='"+jtfXuanKe_xuehao.getText().trim()+"'");
						boolean b = false;
						if(rs.next()){b = true;}
						if(b == true){
						    String strAdd = "insert into StudentChooseCourse(student_id,course_code) " +
								"select Student.student_id, Course.course_code from Student, Course " +
								"where Student.student_id='"+jtfXuanKe_xuehao.getText().trim()+"' and Course.course_name='"+jcbXuanKe_course.getSelectedItem()+"'";
						    stmt.executeUpdate(strAdd);
						    Serch(jtfXuanKe_xuehao.getText().trim());
						    JOptionPane.showMessageDialog(null, "选课成功！","错误提示",JOptionPane.INFORMATION_MESSAGE);
						}else{
							JOptionPane.showMessageDialog(null, "不存在该学生，无法执行此操作！","错误提示",JOptionPane.ERROR_MESSAGE);
						}
						dbconn.close();
						}catch(Exception e)
					}
			}
		});
		
		//确认选课
		jbtnXuanKe_queren.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				try {
					if(jtfXuanKe_xuehao.getText().trim().equals("")){
						JOptionPane.showMessageDialog(null, "学号不能为空！","错误提示",JOptionPane.ERROR_MESSAGE);
					}
					else if(jcbXuanKe_course.getSelectedItem()==str0){
						JOptionPane.showMessageDialog(null, "课程不能为空！","错误提示",JOptionPane.ERROR_MESSAGE);
					}
					else if(!jtfXuanKe_xuehao.getText().trim().equals("")&&jtfXuanKe_xuehao.getText().trim()!=str0){
						dbconn = linkDB.lindDataBase();
						Statement stmt = dbconn.createStatement();
						ResultSet rs = stmt.executeQuery("select student_id from Student where student_id='"+jtfXuanKe_xuehao.getText().trim()+"'");
						boolean b = false;
						if(rs.next()){b = true;}
						if(b == true){
						    String strAdd = "insert into StudentChooseCourse(student_id,course_code) " +
								"select Student.student_id, Course.course_code from Student, Course " +
								"where Student.student_id='"+jtfXuanKe_xuehao.getText().trim()+"' and Course.course_name='"+jcbXuanKe_course.getSelectedItem()+"'";
						    stmt.executeUpdate(strAdd);
						    Serch(jtfXuanKe_xuehao.getText().trim());
						    JOptionPane.showMessageDialog(null, "选课成功！","错误提示",JOptionPane.INFORMATION_MESSAGE);
						}else{
							JOptionPane.showMessageDialog(null, "不存在该学生，无法执行此操作！","错误提示",JOptionPane.ERROR_MESSAGE);
						}
						dbconn.close();
					}
				}catch(Exception e1){
					e1.printStackTrace();
				}
			}
		});
	}
	
	//查询
	public void Serch(String str){
		try {
			dbconn = linkDB.lindDataBase();
			Statement stmt = dbconn.createStatement();//创建SQL命令对象
			ResultSet rs = stmt.executeQuery("select a.student_id, a.student_name, d.course_name, d.course_credit " +
					"from Student a,StudentChooseCourse c,Course d where a.student_id=c.student_id and d.course_code=c.course_code " +
					"and a.student_id='"+str+"' order by a.student_id"); //存放找出数据的总行数
			DefaultTableModel dtmSCC = new DefaultTableModel();
			Vector data = new Vector();
			boolean b = false;
			while(rs.next()){
				Vector vNext = new Vector();
				vNext.add(rs.getString("student_id"));
				vNext.add(rs.getString("student_name"));
				vNext.add(rs.getString("course_name"));
				vNext.add(rs.getString("course_credit"));
				data.add(vNext);
				dtmSCC.setDataVector(data, columName);
				jtSCC.setModel(dtmSCC);
				b = true;
				a = 1;
			}
			if(b == false)  
				JOptionPane.showMessageDialog(null, "没有该学生的选课信息！","查询提示",JOptionPane.INFORMATION_MESSAGE);
			else 
				JOptionPane.showMessageDialog(null, "成功查询到该学生的选课信息！","查询提示",JOptionPane.INFORMATION_MESSAGE);
			dbconn.close();
		} catch (Exception e2) {
			e2.printStackTrace();
		}
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:503)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:322)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2284)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2451)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:170)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:155)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2016-12-11 00:02:33.093
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:503)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:322)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2284)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2451)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:170)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:155)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2016-12-11 00:02:33.095
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:503)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:322)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2284)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2451)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:170)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:155)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2016-12-11 00:02:34.095
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package expStudent;

import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Vector;

import javax.swing.ComboBoxModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

public class StudentChooseCourse {
	private static LinkDB linkDB = new LinkDB();
	private static Connection dbconn;
	//初始化
	public JPanel jpSCC = new JPanel(new GridLayout(2,1));
	public JScrollPane jspSCC = null;
	private JTable jtSCC = null;
	private Vector rowData = new Vector();
	private Vector columName = new Vector();
	private String[] str = {"--请选择内容--"};
	private String str0 = "--请选择内容--";
	//查询
	private JPanel jpOne = new JPanel();
	private JPanel jpTwo = new JPanel();
	private JLabel jlStr0 = new JLabel("选课查询");
	//private JLabel jlSCC_S = new JLabel("学年：");
	//private JComboBox jcbSCC_S = new JComboBox(str);
	//private JLabel jlSCC_T = new JLabel("       学期：");
	//private JComboBox jcbSCC_T = new JComboBox(str);
	private JLabel jlSCC_STU = new JLabel("学号：");
	private JTextField jtfSCC = new JTextField(12);
	private JButton jbtnSCC = new JButton("查询");
	//删除
	private JLabel jlKongGe = new JLabel("          ");
	private JButton jbtnDelete = new JButton("删除");
	private int a = 0;
	//选课
	public JPanel jpXuanKe = new JPanel(new GridLayout(2,1));
	private JPanel jpThree = new JPanel();
	private JPanel jpFour = new JPanel();
	private JLabel jlStr1 = new JLabel("学生选课");
	//private JLabel jlXuanKe_XueNian = new JLabel("学年：");
	//private JComboBox jcbXuanKe_xuenian = new JComboBox(str);
	//private JLabel jlXuanKe_XueQi = new JLabel("          学期：");
	//private JComboBox jcbXuanKe_xueqi = new JComboBox(str);
	private JLabel jlXuanKe_xuehao = new JLabel("学号：");
	private JTextField jtfXuanKe_xuehao = new JTextField(12);
	private JLabel jlXuanKe_course = new JLabel("                课程：");
	private JComboBox jcbXuanKe_course = new JComboBox(str);
	private JButton jbtnXuanKe_queren = new JButton("确认");
	
	public StudentChooseCourse(){
		//初始化
		columName.add("学号");
		columName.add("姓名");
		//columName.add("学年");
		//columName.add("学期号");
		columName.add("课程");
		columName.add("学分");
		//查询
		jpOne.add(jlSCC_STU);
		jpOne.add(jtfSCC);
		jpOne.add(jbtnSCC);
		jpOne.add(jlKongGe);
		jpOne.add(jbtnDelete);
		jpTwo.add(jlStr0);
		jpSCC.add(jpTwo);
		jpSCC.add(jpOne);
		//添加
		jpFour.add(jlStr1);
		jpThree.add(jlXuanKe_xuehao);
		jpThree.add(jtfXuanKe_xuehao);
		jpThree.add(jlXuanKe_course);
		jpThree.add(jcbXuanKe_course);
		jpThree.add(jbtnXuanKe_queren);
		jpXuanKe.add(jpFour);
		jpXuanKe.add(jpThree);
		
		jtSCC = new JTable(rowData,columName);
		jtSCC.setPreferredScrollableViewportSize(new Dimension(880, 300)); //表的大小
		//表中数据居中
		DefaultTableCellRenderer dtcr = new DefaultTableCellRenderer();
		dtcr.setHorizontalAlignment(DefaultTableCellRenderer.CENTER);
		jtSCC.setDefaultRenderer(Object.class, dtcr);
		jspSCC = new JScrollPane(jtSCC);
		
		//显示课程
		try {
			dbconn = linkDB.lindDataBase();
			Statement stmt = dbconn.createStatement();//创建SQL命令对象
		    ResultSet rsCourse = stmt.executeQuery("select distinct course_name from Course");
			while(rsCourse.next()){
				jcbXuanKe_course.addItem(rsCourse.getString("course_name"));
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		/*
		//选择学年出现相应学期
		jcbSCC_S.addItemListener(new ItemListener() {
					
			@Override
			public void itemStateChanged(ItemEvent e) {
				if(e.getStateChange()==ItemEvent.SELECTED){
					jcbSCC_T.removeAllItems();
					jcbSCC_T.addItem("--请选择内容--");
					XueNian_XueQi(jcbSCC_S,jcbSCC_T);
				}
			}
		});
		jcbXuanKe_xuenian.addItemListener(new ItemListener() {
			
			@Override
			public void itemStateChanged(ItemEvent e) {
				if(e.getStateChange()==ItemEvent.SELECTED){
					jcbXuanKe_xueqi.removeAllItems();
					jcbXuanKe_xueqi.addItem("--请选择内容--");
					XueNian_XueQi(jcbXuanKe_xuenian,jcbXuanKe_xueqi);
				}
			}
		});*/
		
		//查询
		jbtnSCC.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				if(!jtfSCC.getText().trim().equals("")){
					Serch(jtfSCC.getText().trim());
				}else{
					JOptionPane.showMessageDialog(null, "学号不能为空！","错误提示",JOptionPane.ERROR_MESSAGE);
				}
			}
		});
		//删除
		jbtnDelete.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
					if(a == 1){
						try{
						dbconn = linkDB.lindDataBase();
						Statement stmt = dbconn.createStatement();
						ResultSet rs = stmt.executeQuery("select student_id from Student where student_id='"+jtfXuanKe_xuehao.getText().trim()+"'");
						boolean b = false;
						if(rs.next()){b = true;}
						if(b == true){
						    String strAdd = "insert into StudentChooseCourse(student_id,course_code) " +
								"select Student.student_id, Course.course_code from Student, Course " +
								"where Student.student_id='"+jtfXuanKe_xuehao.getText().trim()+"' and Course.course_name='"+jcbXuanKe_course.getSelectedItem()+"'";
						    stmt.executeUpdate(strAdd);
						    Serch(jtfXuanKe_xuehao.getText().trim());
						    JOptionPane.showMessageDialog(null, "选课成功！","错误提示",JOptionPane.INFORMATION_MESSAGE);
						}else{
							JOptionPane.showMessageDialog(null, "不存在该学生，无法执行此操作！","错误提示",JOptionPane.ERROR_MESSAGE);
						}
						dbconn.close();
						}catch(Exception e1)
					}
			}
		});
		
		//确认选课
		jbtnXuanKe_queren.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				try {
					if(jtfXuanKe_xuehao.getText().trim().equals("")){
						JOptionPane.showMessageDialog(null, "学号不能为空！","错误提示",JOptionPane.ERROR_MESSAGE);
					}
					else if(jcbXuanKe_course.getSelectedItem()==str0){
						JOptionPane.showMessageDialog(null, "课程不能为空！","错误提示",JOptionPane.ERROR_MESSAGE);
					}
					else if(!jtfXuanKe_xuehao.getText().trim().equals("")&&jtfXuanKe_xuehao.getText().trim()!=str0){
						dbconn = linkDB.lindDataBase();
						Statement stmt = dbconn.createStatement();
						ResultSet rs = stmt.executeQuery("select student_id from Student where student_id='"+jtfXuanKe_xuehao.getText().trim()+"'");
						boolean b = false;
						if(rs.next()){b = true;}
						if(b == true){
						    String strAdd = "insert into StudentChooseCourse(student_id,course_code) " +
								"select Student.student_id, Course.course_code from Student, Course " +
								"where Student.student_id='"+jtfXuanKe_xuehao.getText().trim()+"' and Course.course_name='"+jcbXuanKe_course.getSelectedItem()+"'";
						    stmt.executeUpdate(strAdd);
						    Serch(jtfXuanKe_xuehao.getText().trim());
						    JOptionPane.showMessageDialog(null, "选课成功！","错误提示",JOptionPane.INFORMATION_MESSAGE);
						}else{
							JOptionPane.showMessageDialog(null, "不存在该学生，无法执行此操作！","错误提示",JOptionPane.ERROR_MESSAGE);
						}
						dbconn.close();
					}
				}catch(Exception e1){
					e1.printStackTrace();
				}
			}
		});
	}
	
	//查询
	public void Serch(String str){
		try {
			dbconn = linkDB.lindDataBase();
			Statement stmt = dbconn.createStatement();//创建SQL命令对象
			ResultSet rs = stmt.executeQuery("select a.student_id, a.student_name, d.course_name, d.course_credit " +
					"from Student a,StudentChooseCourse c,Course d where a.student_id=c.student_id and d.course_code=c.course_code " +
					"and a.student_id='"+str+"' order by a.student_id"); //存放找出数据的总行数
			DefaultTableModel dtmSCC = new DefaultTableModel();
			Vector data = new Vector();
			boolean b = false;
			while(rs.next()){
				Vector vNext = new Vector();
				vNext.add(rs.getString("student_id"));
				vNext.add(rs.getString("student_name"));
				vNext.add(rs.getString("course_name"));
				vNext.add(rs.getString("course_credit"));
				data.add(vNext);
				dtmSCC.setDataVector(data, columName);
				jtSCC.setModel(dtmSCC);
				b = true;
				a = 1;
			}
			if(b == false)  
				JOptionPane.showMessageDialog(null, "没有该学生的选课信息！","查询提示",JOptionPane.INFORMATION_MESSAGE);
			else 
				JOptionPane.showMessageDialog(null, "成功查询到该学生的选课信息！","查询提示",JOptionPane.INFORMATION_MESSAGE);
			dbconn.close();
		} catch (Exception e2) {
			e2.printStackTrace();
		}
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:503)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:322)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2284)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2451)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:246)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:206)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1247)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.ui 4 2 2016-12-11 00:02:34.097
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:503)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:322)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2284)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2451)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:246)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:206)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1247)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.ui 4 0 2016-12-11 00:02:34.099
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:503)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:322)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2284)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2451)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:246)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:206)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1247)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.core 4 4 2016-12-11 00:02:34.124
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package expStudent;

import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Vector;

import javax.swing.ComboBoxModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

public class StudentChooseCourse {
	private static LinkDB linkDB = new LinkDB();
	private static Connection dbconn;
	//初始化
	public JPanel jpSCC = new JPanel(new GridLayout(2,1));
	public JScrollPane jspSCC = null;
	private JTable jtSCC = null;
	private Vector rowData = new Vector();
	private Vector columName = new Vector();
	private String[] str = {"--请选择内容--"};
	private String str0 = "--请选择内容--";
	//查询
	private JPanel jpOne = new JPanel();
	private JPanel jpTwo = new JPanel();
	private JLabel jlStr0 = new JLabel("选课查询");
	//private JLabel jlSCC_S = new JLabel("学年：");
	//private JComboBox jcbSCC_S = new JComboBox(str);
	//private JLabel jlSCC_T = new JLabel("       学期：");
	//private JComboBox jcbSCC_T = new JComboBox(str);
	private JLabel jlSCC_STU = new JLabel("学号：");
	private JTextField jtfSCC = new JTextField(12);
	private JButton jbtnSCC = new JButton("查询");
	//删除
	private JLabel jlKongGe = new JLabel("          ");
	private JButton jbtnDelete = new JButton("删除");
	private int a = 0;
	//选课
	public JPanel jpXuanKe = new JPanel(new GridLayout(2,1));
	private JPanel jpThree = new JPanel();
	private JPanel jpFour = new JPanel();
	private JLabel jlStr1 = new JLabel("学生选课");
	//private JLabel jlXuanKe_XueNian = new JLabel("学年：");
	//private JComboBox jcbXuanKe_xuenian = new JComboBox(str);
	//private JLabel jlXuanKe_XueQi = new JLabel("          学期：");
	//private JComboBox jcbXuanKe_xueqi = new JComboBox(str);
	private JLabel jlXuanKe_xuehao = new JLabel("学号：");
	private JTextField jtfXuanKe_xuehao = new JTextField(12);
	private JLabel jlXuanKe_course = new JLabel("                课程：");
	private JComboBox jcbXuanKe_course = new JComboBox(str);
	private JButton jbtnXuanKe_queren = new JButton("确认");
	
	public StudentChooseCourse(){
		//初始化
		columName.add("学号");
		columName.add("姓名");
		//columName.add("学年");
		//columName.add("学期号");
		columName.add("课程");
		columName.add("学分");
		//查询
		jpOne.add(jlSCC_STU);
		jpOne.add(jtfSCC);
		jpOne.add(jbtnSCC);
		jpOne.add(jlKongGe);
		jpOne.add(jbtnDelete);
		jpTwo.add(jlStr0);
		jpSCC.add(jpTwo);
		jpSCC.add(jpOne);
		//添加
		jpFour.add(jlStr1);
		jpThree.add(jlXuanKe_xuehao);
		jpThree.add(jtfXuanKe_xuehao);
		jpThree.add(jlXuanKe_course);
		jpThree.add(jcbXuanKe_course);
		jpThree.add(jbtnXuanKe_queren);
		jpXuanKe.add(jpFour);
		jpXuanKe.add(jpThree);
		
		jtSCC = new JTable(rowData,columName);
		jtSCC.setPreferredScrollableViewportSize(new Dimension(880, 300)); //表的大小
		//表中数据居中
		DefaultTableCellRenderer dtcr = new DefaultTableCellRenderer();
		dtcr.setHorizontalAlignment(DefaultTableCellRenderer.CENTER);
		jtSCC.setDefaultRenderer(Object.class, dtcr);
		jspSCC = new JScrollPane(jtSCC);
		
		//显示课程
		try {
			dbconn = linkDB.lindDataBase();
			Statement stmt = dbconn.createStatement();//创建SQL命令对象
		    ResultSet rsCourse = stmt.executeQuery("select distinct course_name from Course");
			while(rsCourse.next()){
				jcbXuanKe_course.addItem(rsCourse.getString("course_name"));
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		/*
		//选择学年出现相应学期
		jcbSCC_S.addItemListener(new ItemListener() {
					
			@Override
			public void itemStateChanged(ItemEvent e) {
				if(e.getStateChange()==ItemEvent.SELECTED){
					jcbSCC_T.removeAllItems();
					jcbSCC_T.addItem("--请选择内容--");
					XueNian_XueQi(jcbSCC_S,jcbSCC_T);
				}
			}
		});
		jcbXuanKe_xuenian.addItemListener(new ItemListener() {
			
			@Override
			public void itemStateChanged(ItemEvent e) {
				if(e.getStateChange()==ItemEvent.SELECTED){
					jcbXuanKe_xueqi.removeAllItems();
					jcbXuanKe_xueqi.addItem("--请选择内容--");
					XueNian_XueQi(jcbXuanKe_xuenian,jcbXuanKe_xueqi);
				}
			}
		});*/
		
		//查询
		jbtnSCC.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				if(!jtfSCC.getText().trim().equals("")){
					Serch(jtfSCC.getText().trim());
				}else{
					JOptionPane.showMessageDialog(null, "学号不能为空！","错误提示",JOptionPane.ERROR_MESSAGE);
				}
			}
		});
		//删除
		jbtnDelete.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
					if(a == 1){
						try{
						dbconn = linkDB.lindDataBase();
						Statement stmt = dbconn.createStatement();
						ResultSet rs = stmt.executeQuery("select student_id from Student where student_id='"+jtfXuanKe_xuehao.getText().trim()+"'");
						boolean b = false;
						if(rs.next()){b = true;}
						if(b == true){
						    String strAdd = "insert into StudentChooseCourse(student_id,course_code) " +
								"select Student.student_id, Course.course_code from Student, Course " +
								"where Student.student_id='"+jtfXuanKe_xuehao.getText().trim()+"' and Course.course_name='"+jcbXuanKe_course.getSelectedItem()+"'";
						    stmt.executeUpdate(strAdd);
						    Serch(jtfXuanKe_xuehao.getText().trim());
						    JOptionPane.showMessageDialog(null, "选课成功！","错误提示",JOptionPane.INFORMATION_MESSAGE);
						}else{
							JOptionPane.showMessageDialog(null, "不存在该学生，无法执行此操作！","错误提示",JOptionPane.ERROR_MESSAGE);
						}
						dbconn.close();
						}catch(Exception e1)
					}
			}
		});
		
		//确认选课
		jbtnXuanKe_queren.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				try {
					if(jtfXuanKe_xuehao.getText().trim().equals("")){
						JOptionPane.showMessageDialog(null, "学号不能为空！","错误提示",JOptionPane.ERROR_MESSAGE);
					}
					else if(jcbXuanKe_course.getSelectedItem()==str0){
						JOptionPane.showMessageDialog(null, "课程不能为空！","错误提示",JOptionPane.ERROR_MESSAGE);
					}
					else if(!jtfXuanKe_xuehao.getText().trim().equals("")&&jtfXuanKe_xuehao.getText().trim()!=str0){
						dbconn = linkDB.lindDataBase();
						Statement stmt = dbconn.createStatement();
						ResultSet rs = stmt.executeQuery("select student_id from Student where student_id='"+jtfXuanKe_xuehao.getText().trim()+"'");
						boolean b = false;
						if(rs.next()){b = true;}
						if(b == true){
						    String strAdd = "insert into StudentChooseCourse(student_id,course_code) " +
								"select Student.student_id, Course.course_code from Student, Course " +
								"where Student.student_id='"+jtfXuanKe_xuehao.getText().trim()+"' and Course.course_name='"+jcbXuanKe_course.getSelectedItem()+"'";
						    stmt.executeUpdate(strAdd);
						    Serch(jtfXuanKe_xuehao.getText().trim());
						    JOptionPane.showMessageDialog(null, "选课成功！","错误提示",JOptionPane.INFORMATION_MESSAGE);
						}else{
							JOptionPane.showMessageDialog(null, "不存在该学生，无法执行此操作！","错误提示",JOptionPane.ERROR_MESSAGE);
						}
						dbconn.close();
					}
				}catch(Exception e1){
					e1.printStackTrace();
				}
			}
		});
	}
	
	//查询
	public void Serch(String str){
		try {
			dbconn = linkDB.lindDataBase();
			Statement stmt = dbconn.createStatement();//创建SQL命令对象
			ResultSet rs = stmt.executeQuery("select a.student_id, a.student_name, d.course_name, d.course_credit " +
					"from Student a,StudentChooseCourse c,Course d where a.student_id=c.student_id and d.course_code=c.course_code " +
					"and a.student_id='"+str+"' order by a.student_id"); //存放找出数据的总行数
			DefaultTableModel dtmSCC = new DefaultTableModel();
			Vector data = new Vector();
			boolean b = false;
			while(rs.next()){
				Vector vNext = new Vector();
				vNext.add(rs.getString("student_id"));
				vNext.add(rs.getString("student_name"));
				vNext.add(rs.getString("course_name"));
				vNext.add(rs.getString("course_credit"));
				data.add(vNext);
				dtmSCC.setDataVector(data, columName);
				jtSCC.setModel(dtmSCC);
				b = true;
				a = 1;
			}
			if(b == false)  
				JOptionPane.showMessageDialog(null, "没有该学生的选课信息！","查询提示",JOptionPane.INFORMATION_MESSAGE);
			else 
				JOptionPane.showMessageDialog(null, "成功查询到该学生的选课信息！","查询提示",JOptionPane.INFORMATION_MESSAGE);
			dbconn.close();
		} catch (Exception e2) {
			e2.printStackTrace();
		}
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:503)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:322)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2284)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2451)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:470)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2016-12-11 00:02:34.127
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:503)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:322)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2284)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2451)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:470)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2016-12-11 00:02:34.128
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:503)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:322)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2284)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2451)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:470)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2016-12-11 00:02:34.148
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package expStudent;

import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Vector;

import javax.swing.ComboBoxModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

public class StudentChooseCourse {
	private static LinkDB linkDB = new LinkDB();
	private static Connection dbconn;
	//初始化
	public JPanel jpSCC = new JPanel(new GridLayout(2,1));
	public JScrollPane jspSCC = null;
	private JTable jtSCC = null;
	private Vector rowData = new Vector();
	private Vector columName = new Vector();
	private String[] str = {"--请选择内容--"};
	private String str0 = "--请选择内容--";
	//查询
	private JPanel jpOne = new JPanel();
	private JPanel jpTwo = new JPanel();
	private JLabel jlStr0 = new JLabel("选课查询");
	//private JLabel jlSCC_S = new JLabel("学年：");
	//private JComboBox jcbSCC_S = new JComboBox(str);
	//private JLabel jlSCC_T = new JLabel("       学期：");
	//private JComboBox jcbSCC_T = new JComboBox(str);
	private JLabel jlSCC_STU = new JLabel("学号：");
	private JTextField jtfSCC = new JTextField(12);
	private JButton jbtnSCC = new JButton("查询");
	//删除
	private JLabel jlKongGe = new JLabel("          ");
	private JButton jbtnDelete = new JButton("删除");
	private int a = 0;
	//选课
	public JPanel jpXuanKe = new JPanel(new GridLayout(2,1));
	private JPanel jpThree = new JPanel();
	private JPanel jpFour = new JPanel();
	private JLabel jlStr1 = new JLabel("学生选课");
	//private JLabel jlXuanKe_XueNian = new JLabel("学年：");
	//private JComboBox jcbXuanKe_xuenian = new JComboBox(str);
	//private JLabel jlXuanKe_XueQi = new JLabel("          学期：");
	//private JComboBox jcbXuanKe_xueqi = new JComboBox(str);
	private JLabel jlXuanKe_xuehao = new JLabel("学号：");
	private JTextField jtfXuanKe_xuehao = new JTextField(12);
	private JLabel jlXuanKe_course = new JLabel("                课程：");
	private JComboBox jcbXuanKe_course = new JComboBox(str);
	private JButton jbtnXuanKe_queren = new JButton("确认");
	
	public StudentChooseCourse(){
		//初始化
		columName.add("学号");
		columName.add("姓名");
		//columName.add("学年");
		//columName.add("学期号");
		columName.add("课程");
		columName.add("学分");
		//查询
		jpOne.add(jlSCC_STU);
		jpOne.add(jtfSCC);
		jpOne.add(jbtnSCC);
		jpOne.add(jlKongGe);
		jpOne.add(jbtnDelete);
		jpTwo.add(jlStr0);
		jpSCC.add(jpTwo);
		jpSCC.add(jpOne);
		//添加
		jpFour.add(jlStr1);
		jpThree.add(jlXuanKe_xuehao);
		jpThree.add(jtfXuanKe_xuehao);
		jpThree.add(jlXuanKe_course);
		jpThree.add(jcbXuanKe_course);
		jpThree.add(jbtnXuanKe_queren);
		jpXuanKe.add(jpFour);
		jpXuanKe.add(jpThree);
		
		jtSCC = new JTable(rowData,columName);
		jtSCC.setPreferredScrollableViewportSize(new Dimension(880, 300)); //表的大小
		//表中数据居中
		DefaultTableCellRenderer dtcr = new DefaultTableCellRenderer();
		dtcr.setHorizontalAlignment(DefaultTableCellRenderer.CENTER);
		jtSCC.setDefaultRenderer(Object.class, dtcr);
		jspSCC = new JScrollPane(jtSCC);
		
		//显示课程
		try {
			dbconn = linkDB.lindDataBase();
			Statement stmt = dbconn.createStatement();//创建SQL命令对象
		    ResultSet rsCourse = stmt.executeQuery("select distinct course_name from Course");
			while(rsCourse.next()){
				jcbXuanKe_course.addItem(rsCourse.getString("course_name"));
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		/*
		//选择学年出现相应学期
		jcbSCC_S.addItemListener(new ItemListener() {
					
			@Override
			public void itemStateChanged(ItemEvent e) {
				if(e.getStateChange()==ItemEvent.SELECTED){
					jcbSCC_T.removeAllItems();
					jcbSCC_T.addItem("--请选择内容--");
					XueNian_XueQi(jcbSCC_S,jcbSCC_T);
				}
			}
		});
		jcbXuanKe_xuenian.addItemListener(new ItemListener() {
			
			@Override
			public void itemStateChanged(ItemEvent e) {
				if(e.getStateChange()==ItemEvent.SELECTED){
					jcbXuanKe_xueqi.removeAllItems();
					jcbXuanKe_xueqi.addItem("--请选择内容--");
					XueNian_XueQi(jcbXuanKe_xuenian,jcbXuanKe_xueqi);
				}
			}
		});*/
		
		//查询
		jbtnSCC.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				if(!jtfSCC.getText().trim().equals("")){
					Serch(jtfSCC.getText().trim());
				}else{
					JOptionPane.showMessageDialog(null, "学号不能为空！","错误提示",JOptionPane.ERROR_MESSAGE);
				}
			}
		});
		//删除
		jbtnDelete.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
					if(a == 1){
						try{
						dbconn = linkDB.lindDataBase();
						Statement stmt = dbconn.createStatement();
						ResultSet rs = stmt.executeQuery("select student_id from Student where student_id='"+jtfXuanKe_xuehao.getText().trim()+"'");
						boolean b = false;
						if(rs.next()){b = true;}
						if(b == true){
						    String strAdd = "insert into StudentChooseCourse(student_id,course_code) " +
								"select Student.student_id, Course.course_code from Student, Course " +
								"where Student.student_id='"+jtfXuanKe_xuehao.getText().trim()+"' and Course.course_name='"+jcbXuanKe_course.getSelectedItem()+"'";
						    stmt.executeUpdate(strAdd);
						    Serch(jtfXuanKe_xuehao.getText().trim());
						    JOptionPane.showMessageDialog(null, "选课成功！","错误提示",JOptionPane.INFORMATION_MESSAGE);
						}else{
							JOptionPane.showMessageDialog(null, "不存在该学生，无法执行此操作！","错误提示",JOptionPane.ERROR_MESSAGE);
						}
						dbconn.close();
						}catch(Exception e1)
					}
			}
		});
		
		//确认选课
		jbtnXuanKe_queren.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				try {
					if(jtfXuanKe_xuehao.getText().trim().equals("")){
						JOptionPane.showMessageDialog(null, "学号不能为空！","错误提示",JOptionPane.ERROR_MESSAGE);
					}
					else if(jcbXuanKe_course.getSelectedItem()==str0){
						JOptionPane.showMessageDialog(null, "课程不能为空！","错误提示",JOptionPane.ERROR_MESSAGE);
					}
					else if(!jtfXuanKe_xuehao.getText().trim().equals("")&&jtfXuanKe_xuehao.getText().trim()!=str0){
						dbconn = linkDB.lindDataBase();
						Statement stmt = dbconn.createStatement();
						ResultSet rs = stmt.executeQuery("select student_id from Student where student_id='"+jtfXuanKe_xuehao.getText().trim()+"'");
						boolean b = false;
						if(rs.next()){b = true;}
						if(b == true){
						    String strAdd = "insert into StudentChooseCourse(student_id,course_code) " +
								"select Student.student_id, Course.course_code from Student, Course " +
								"where Student.student_id='"+jtfXuanKe_xuehao.getText().trim()+"' and Course.course_name='"+jcbXuanKe_course.getSelectedItem()+"'";
						    stmt.executeUpdate(strAdd);
						    Serch(jtfXuanKe_xuehao.getText().trim());
						    JOptionPane.showMessageDialog(null, "选课成功！","错误提示",JOptionPane.INFORMATION_MESSAGE);
						}else{
							JOptionPane.showMessageDialog(null, "不存在该学生，无法执行此操作！","错误提示",JOptionPane.ERROR_MESSAGE);
						}
						dbconn.close();
					}
				}catch(Exception e1){
					e1.printStackTrace();
				}
			}
		});
	}
	
	//查询
	public void Serch(String str){
		try {
			dbconn = linkDB.lindDataBase();
			Statement stmt = dbconn.createStatement();//创建SQL命令对象
			ResultSet rs = stmt.executeQuery("select a.student_id, a.student_name, d.course_name, d.course_credit " +
					"from Student a,StudentChooseCourse c,Course d where a.student_id=c.student_id and d.course_code=c.course_code " +
					"and a.student_id='"+str+"' order by a.student_id"); //存放找出数据的总行数
			DefaultTableModel dtmSCC = new DefaultTableModel();
			Vector data = new Vector();
			boolean b = false;
			while(rs.next()){
				Vector vNext = new Vector();
				vNext.add(rs.getString("student_id"));
				vNext.add(rs.getString("student_name"));
				vNext.add(rs.getString("course_name"));
				vNext.add(rs.getString("course_credit"));
				data.add(vNext);
				dtmSCC.setDataVector(data, columName);
				jtSCC.setModel(dtmSCC);
				b = true;
				a = 1;
			}
			if(b == false)  
				JOptionPane.showMessageDialog(null, "没有该学生的选课信息！","查询提示",JOptionPane.INFORMATION_MESSAGE);
			else 
				JOptionPane.showMessageDialog(null, "成功查询到该学生的选课信息！","查询提示",JOptionPane.INFORMATION_MESSAGE);
			dbconn.close();
		} catch (Exception e2) {
			e2.printStackTrace();
		}
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:503)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:322)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2284)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2451)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:470)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:170)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:155)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2016-12-11 00:02:34.150
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:503)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:322)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2284)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2451)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:470)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:170)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:155)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2016-12-11 00:02:34.151
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:503)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:322)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2284)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2451)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:470)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:170)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:155)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)
!SESSION 2016-12-14 20:00:59.466 -----------------------------------------------
eclipse.buildId=M20120914-1800
java.version=1.8.0_102
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=zh_CN
Command-line arguments:  -os win32 -ws win32 -arch x86_64

!ENTRY org.eclipse.core.resources 2 10035 2016-12-14 20:01:02.560
!MESSAGE The workspace exited with unsaved changes in the previous session; refreshing workspace to recover changes.
